#!/usr/bin/env python3
"""update: a script to automatically update software"""

from shutil import which
from os import environ
from subprocess import run
import sys
#all above modules are built in to python 3.10
import argparse #argparse, python module created by Thomas Waldmann

def isTermux() -> bool:
    """Check if current os is termux"""
    return environ.get("TERMUX_VERSION", None) is not None

def has(program: str) -> bool:
    """Check if specified program is in PATH"""
    return which(program) is not None

def getRootString() -> None:
    """return string to prepend to commands in order to run them as root"""
    if isTermux():
        rootString = ""
        rootProgram = "Termux"
    elif environ.get("EUID", None) == 0:
        rootString = ""
        rootProgram = "Root User"
    elif has("doas"):
        rootProgram = "Doas"
        rootString = "doas "
    elif has("sudo"):
        rootProgram = "Sudo"
        rootString = "sudo "
    else:
        print("ERROR: no root privileges found.")
        print("You can try running this script as root or verifying that sudo or doas is in your PATH")
        sys.exit(1)
    print("Using " + rootProgram + " for root privileges.")
    return rootString

def getHome() -> str:
    """return the current users home directory, with a trailing slash"""
    home = environ.get("HOME")
    if home[-1] != "/":
        home += "/"
    return home

def getManagers() -> None:
    """returns a list of all availible package managers"""
    foundManagers = []
    for manager in managerList:
        if has(manager):
            foundManagers.append(manager)
    return foundManagers

def update(manager: str) -> None:
    """update a specified package manager"""
    if has(manager):
        for command in managerList[manager]:
            run(command.split(" "), check=False)

def updateAll() -> None:
    """update all availible packages"""
    print("Updating " + str(managerList.keys()) + ".")
    for manager in managerList:
        update(manager)

ROOT_STRING = getRootString()
managerList = {
    "apt-get":
        [
            ROOT_STRING + "apt-get update",
            ROOT_STRING + "apt-get upgrade",
            ROOT_STRING + "apt-get autoremove"
        ],
    "brew":
        [
            "brew update",
            "brew upgrade",
            "brew autoremove"
        ],
    "flatpak":
        [
            ROOT_STRING + "flatpak update"
        ],
    "git":
        [
            "git -C " + getHome() + "Documents/neofetch pull",
            "git -C " + getHome() + "Documents/ytfzf pull"
        ],
    "softwareupdate":
        [
            "softwareupdate --verbose -lir --agree-to-license"
        ],
    "pacman":
        [
            ROOT_STRING + "pacman -Syu"
        ],
    "pip":
        [
            "python -m pip install --upgrade pip"
        ],
    "pkg":
        [
            "pkg upgrade",
            "pkg autoclean"
        ],
    "port":
        [
            "port -v selfupdate"
            "port -v upgrade outdated"
            "port -v uninstall inactive"
        ],
    "scoop":
        [
            "scoop update"
        ],
    "snap":
        [
            ROOT_STRING + "snap refresh"
        ],
    "tldr":
        [
            "tldr -vu"
        ],
    "yay":
        [
            "yay -Syu"
        ]
}

parser = argparse.ArgumentParser(description="a program to automatically uppdate installed package managers")

parser.add_argument("--toUpdate", dest="toUpdate", help="specify which managers to update", nargs="+", type=str)
parser.add_argument("--skip", "-s", dest="skip", help="specify which managers to skip", nargs="+", type=str)
parser.add_argument("--list", "-l", dest="listMode", action="store_true", help="list availible package managers")
parser.add_argument("--all", "-a", dest="UPDATE_ALL", action="store_true", help="update all availible package managers, (this is the default)")

args = vars(parser.parse_args())
toUpdate = args["toUpdate"]
listMode = args["listMode"]
skip = args["skip"]
UPDATE_ALL = args["UPDATE_ALL"]

# remove skipped managers
if skip is not None:
    for skippedManager in skip:
        if skippedManager in managerList:
            managerList.pop(skippedManager)
        else:
            print("WARNING: unrecognized package manager '" + str(skippedManager.keys()) + "'.")

if listMode:
    print(getManagers())
elif toUpdate is None or UPDATE_ALL:
    updateAll()
else:
    print("Updating " + str(toUpdate) + ".")
    for selectedManager in toUpdate:
        if selectedManager in managerList:
            # don't update pacman if yay is installed
            if (selectedManager == "pacman") and (has("yay")):
                continue
            else:
                update(selectedManager)
        else:
            print("WARNING: unrecognized package manager '" + str(selectedManager) + "'.")
