#!/usr/bin/env python3
from shutil import which
from os import environ
from subprocess import run, DEVNULL
from sys import argv

def has(program: str) -> bool:
    if program == "apt-get":
        try:
            return (run(["apt-get", "--version"], stderr=DEVNULL, stdout=DEVNULL).returncode == 0) and (environ.get("TERMUX_VERSION", None) == None)
        except:
            return False
    else:
        return which(program) != None

def getRootString() -> None:
    if environ.get("TERMUX_VERSION", None) != None:
        rootProgram = "Termux"
    elif environ.get("EUID", None) == 0:
        rootstring = ""
        rootProgram = "Root User"
    elif has("doas"):
        rootProgram = "Doas"
        rootstring = "doas "
    elif has("sudo"):
        rootProgram = "Sudo"
        rootstring = "sudo "
    else:
        print("ERROR: no root privileges found.")
        print("You can try running this script as root or verifying that sudo or doas is in your PATH")
        exit(1)
    print("Using " + rootProgram + " for root privileges.")
    return rootstring

def getHome() -> str:
    home = environ.get("HOME")
    if home[-1] != "/":
        home += "/"
    return home

def getManagers() -> None:
    foundManagers = []
    for i in managerList.keys():
        if has(i):
            foundManagers.append(i)
    return foundManagers

def update(manager: str) -> None:
    if has(manager):
        for j in managerList[manager]:
            run(j.split(" "))

def updateAll() -> None:
    for i in managerList.keys():
        update(i)

rootString = getRootString()
specifiedManager = False
managerList = {
    "apt-get":
        [
            rootString + "apt-get update",
            rootString + "apt-get upgrade",
            rootString + "apt-get autoremove"
        ],
    "brew":
        [
            "brew -v update",
            "brew -v upgrade",
            "brew -v autoremove"
        ],
    "flatpak":
        [
            rootString + "flatpak update"
        ],
    "git":
        [
            "git -C " + getHome() + "Documents/neofetch pull",
            "git -C " + getHome() + "Documents/ytfzf pull",
            "git -C " + getHome() + "Documents/zspotify pull"
        ],
    "softwareupdate":
        [
            "softwareupdate --verbose -lir --agree-to-license"
        ],
    "pacman":
        [
            rootString + "pacman -Syu"
        ],
    "pip":
        [
            "python -m pip install --upgrade pip"
        ],
    "pkg":
        [
            "pkg upgrade",
            "pkg autoclean"
        ],
    "port":
        [
            "port -v selfupdate"
            "port -v upgrade outdated"
            "port -v uninstall inactive"
        ],
    "scoop":
        [
            "scoop update"
        ],
    "snap":
        [
            rootString + "snap refresh"
        ],
    "tldr":
        [
            "tldr -vu"
        ],
    "yay":
        [
            "yay -Syu"
        ]
}
params = argv[1:]

if len(params) > 0:
    for i in params:
        if i == "list":
            print(getManagers())
        elif i == "all":
            updateAll()
        else:
            if i in managerList.keys():
                update(i)
else:
    updateAll()

