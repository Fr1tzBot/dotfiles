#!/usr/bin/env python3
"""update: a script to automatically update software"""

from shutil import which
from os import environ
from subprocess import run
import sys
#all above modules are built in to python 3.10
import argparse #argparse, python module created by Thomas Waldmann

def isTermux() -> bool:
    """Check if current os is termux"""
    return environ.get("TERMUX_VERSION", None) is not None

def has(program: str) -> bool:
    """Check if specified program is in PATH"""
    return which(program) is not None

def getRootString() -> None:
    """return string to prepend to commands in order to run them as root"""
    if isTermux():
        print("No Root Privileges on Termux")
        return ""
    elif environ.get("EUID", None) == 0:
        rootString = ""
        rootProgram = "Root User"
    elif has("doas"):
        rootProgram = "doas"
        rootString = "doas "
    elif has("sudo"):
        rootProgram = "sudo"
        rootString = "sudo "
    else:
        print("ERROR: no root privileges found.")
        print("You can try running this script as root or verifying that sudo or doas is in your PATH")
        sys.exit(1)
    print("Using " + rootProgram + " for root privileges.")
    return rootString

def getHome() -> str:
    """return the current users home directory, with a trailing slash"""
    home = environ.get("HOME")
    if home[-1] != "/":
        home += "/"
    return home

def getManagers() -> None:
    """returns a list of all availible package managers"""
    foundManagers = []
    for manager in managerList:
        if has(manager):
            foundManagers.append(manager)
    return foundManagers

def update(manager: str) -> None:
    """update a specified package manager"""
    if has(manager):
        for command in managerList[manager]:
            run(command.split(" "), check=False)

ROOT_STRING = getRootString()
managerList = {
    "apt-get":
        [
            ROOT_STRING + "apt-get update",
            ROOT_STRING + "apt-get upgrade",
            ROOT_STRING + "apt-get autoremove"
        ],
    "brew":
        [
            "brew update",
            "brew upgrade",
            "brew autoremove"
        ],
    "dnf":
        [
            ROOT_STRING + "dnf upgrade"
        ],
    "emerge":
        [
            ROOT_STRING + "emerge --sync",
            ROOT_STRING + "emerge --update --deep --with-bdeps=y @world",
            ROOT_STRING + "emerge --deepclean"
    "flatpak":
        [
            ROOT_STRING + "flatpak update"
        ],
    "softwareupdate":
        [
            "softwareupdate --verbose -lir --agree-to-license"
        ],
    "pacman":
        [
            "echo Skipped pacman for yay" if has("yay") else ROOT_STRING + "pacman -Syu"
        ],
    "pkg":
        [
            "pkg upgrade",
            "pkg autoclean"
        ],
    "port":
        [
            "port -v selfupdate"
            "port -v upgrade outdated"
            "port -v uninstall inactive"
        ],
    "scoop":
        [
            "scoop update"
        ],
    "snap":
        [
            ROOT_STRING + "snap refresh"
        ],
    "tldr":
        [
            "tldr -u"
        ],
    "yay":
        [
            "yay -Syu --noconfirm"
        ]
}

try:
    parser = argparse.ArgumentParser(description="a program to automatically uppdate installed package managers")

    parser.add_argument("--toUpdate", dest="toUpdate", help="specify which managers to update", nargs="+", type=str)
    parser.add_argument("--skip", "-s", dest="skip", help="specify which managers to skip", nargs="+", type=str)
    parser.add_argument("--list", "-l", dest="listMode", action="store_true", help="list availible package managers")
    parser.add_argument("--all", "-a", dest="UPDATE_ALL", action="store_true", help="update all availible package managers, (this is the default)")

    args = vars(parser.parse_args())
    toUpdate = args["toUpdate"]
    listMode = args["listMode"]
    skip = args["skip"]
    UPDATE_ALL = args["UPDATE_ALL"]

    # remove skipped managers
    if skip is not None:
        for skippedManager in skip:
            if skippedManager in managerList:
                managerList.pop(skippedManager)
            else:
                print("WARNING: unrecognized package manager '" + str(skippedManager.keys()) + "'.")

    if listMode:
        print(getManagers())
    elif toUpdate is None or UPDATE_ALL:
        #update all availible packages
        for manager in managerList:
            update(manager)
    else:
        print("Updating " + str(toUpdate) + ".")
        for selectedManager in toUpdate:
            if selectedManager in managerList:
                update(selectedManager)
            else:
                print("WARNING: unrecognized package manager '" + str(selectedManager) + "'.")
except KeyboardInterrupt:
    sys.exit(1)

