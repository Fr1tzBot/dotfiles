#!/bin/bash
has() { type -p "$1" &> /dev/null; }

if [ -n $TERMUX_VERSION ] ; then
    printf "No root privileges needed on termux\n"
elif has doas ; then
    printf "Using doas for root privileges\n"
    rootstring="doas"
elif has sudo ; then
    printf "Using sudo for root privileges\n"
    rootstring="sudo"
elif [ "$EUID" -eq 0 ] ; then
    printf "Using current user for root privileges\n"
    rootstring=""
else
    printf "ERROR: no root privileges found.\n"
    printf "You can try running this script as root or verifying that sudo or doas is in your PATH"
    exit
fi

updateApt() {
    #exit code check to prevent apt binary being detected on mac
    if apt --version &> /dev/null && [ -z "$TERMUX_VERSION" ] ; then
        $rootstring apt update
        $rootstring apt upgrade
        $rootstring apt autoremove
    fi
}
updateBrew() {
    brew -v update
    brew -v upgrade
    brew -v autoremove
}

updateFlatpak() { $rootstring flatpak update; }
updateGit() {
    git -C "$HOME/Documents/neofetch" pull
    git -C "$HOME/Documents/ytfzf" pull
}
updateMac() {
    softwareupdate --verbose -l
    softwareupdate --verbose -ir --agree-to-license
}

updatePacman() { $rootstring pacman -Syu; }
updatePip() { python -m pip install --upgrade pip; }

updatePkg() {
    if [ -n $TERMUX_VERSION ] ; then
        pkg upgrade
        pkg autoclean
    fi
}
updatePort() {
    port -v selfupdate
    port -v upgrade outdated
    port -v uninstall inactive
}
updateScoop() { scoop update; }
updateSnap() { $rootstring snap refresh; }

updateAll() {
    has apt && updateApt
    has brew && updateBrew
    has flatpak && updateFlatpak
    has git && updateGit
    has softwareupdate && updateMac
    has pacman && updatePacman
    has pip && updatePip
    has pkg && updatePkg
    has port && updatePort
    has scoop && updateScoop
    has snap && updateSnap
}

if (($#==0)); then
    updateAll
else
    case $1 in
        all) updateAll ;;

        apt) updateApt ;;
        brew) updateBrew ;;
        flatpak) updateFlatpak ;;
        git) updateGit ;;
        mac) updateMac ;;
        pacman) updatePacman;;
        pip) updatePip ;;
        pkg) updatePkg ;;
        port) updatePort ;;
        scoop) updateScoop ;;
        snap) updateSnap ;;

        *) echo "Error: unrecognized parameter" ;;
    esac
fi

